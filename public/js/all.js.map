{"version":3,"sources":["FieldToggle.js","guild_manage.js","member_edit.js","member_list.js","app.js"],"names":[],"mappingslGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["/* FieldToggle provides support for toggling visibility of one to several fields\n * Usage: Place in listener for the 'actor' field\n *\n var fieldToggle = Object.create(FieldToggle);\n fieldToggle.doToggle({\n     toggleType: 'select',\n     actorSelector: '#' + $(this).attr('id'),\n     actionSelector: '.form-group.leadership-date',\n     emptyValue: '0'\n });\n *\n *\n * */\nvar FieldToggle = {\n    toggleType: null,\n    actorSelector: null,\n    actionSelector: null,\n    emptyValue: null,\n    multiAttribute: null,\n    doToggle: function(options) {\n        $.extend(this, options);\n        switch (this.toggleType) {\n            case 'checkbox':\n                this._doCheckbox();\n                break;\n            case 'select':\n                this._doSelect();\n                break;\n            case 'select_multi':\n                this._doSelectMulti();\n                break;\n        }\n\n    },\n    _doCheckbox: function() {\n        var $thisActor = $(this.actorSelector);\n        var $thisAction = $(this.actionSelector);\n        var toggle = ($thisActor.is(':checked')) ? 'show' : 'hide';\n        $thisAction.removeClass('show hide');\n        $thisAction.addClass(toggle);\n    },\n    _doSelect: function() {\n        var $thisActor = $(this.actorSelector);\n        var $thisAction = $(this.actionSelector);\n        var toggle = ($thisActor.val() != this.emptyValue) ? 'show' : 'hide';\n        $thisAction.removeClass('show hide');\n        $thisAction.addClass(toggle);\n    },\n    _doSelectMulti: function() {\n        var self = this;\n        $(this.actionSelector).each(function () {\n            var $this = $(this);\n            var thisValue = $this.attr(self.multiAttribute);\n            var currentVal = $(self.actorSelector).val();\n            var toggle = (currentVal >= thisValue) ? 'show' : 'hide';\n            $this.removeClass('show hide');\n            $this.addClass(toggle);\n        });\n    }\n}\n\n","$(document).ready(function ($) {\n\n    if ($('#guild_manage').is('*')) {\n        var query = Object.create(UrlQuery);\n        var guild = query.getUrlPart();\n        // Instantiate the Bloodhound suggestion engine\n        var members = new Bloodhound({\n            datumTokenizer: function(datum) {\n                return Bloodhound.tokenizers.whitespace(datum.value);\n            },\n            queryTokenizer: Bloodhound.tokenizers.whitespace,\n            remote: {\n                wildcard: '%QUERY',\n                url: 'http://roster.local/public/member/search?q=%QUERY&guild=' + guild,\n                transform: function(response) {\n                    return $.map(response, function(member) {\n                        return {\n                            value: member\n                        };\n                    });\n                }\n            }\n        });\n\n        $('.typeahead').typeahead(null, {\n            display: 'value',\n            source: members\n        });\n    }\n});\n","// JS code for Member Edit page\n\n$(document).ready(function ($) {\n\n    if ($('#member_update').is('*')) {\n        $('.date-pick').datepicker({\n            format: 'M d, yyyy',\n            orientation: 'bottom'\n        });\n\n        $('[name=phone_button]').on('click', function() {\n            var value = $(this).val();\n            $('[name=Primary_Phone]').val(value);\n        });\n\n        /* Use FieldToggle to toggle visibility of date fields */\n        var toggler = Object.create(FieldToggle);\n        $('#member_degree').on('change', function () {\n            toggler.doToggle({\n                toggleType: 'select_multi',\n                actorSelector: '#member_degree',\n                actionSelector: '.degree-date',\n                multiAttribute: 'data-degree-date'\n            });\n        })\n\n        $('#bonded_check').on('click', function () {\n            toggler.doToggle({\n                toggleType: 'checkbox',\n                actorSelector: '#' + $(this).attr('id'),\n                actionSelector: '.form-group.bonded-date'\n            });\n        });\n\n        $('#solitary_check').on('click', function () {\n            toggler.doToggle({\n                toggleType: 'checkbox',\n                actorSelector: '#' + $(this).attr('id'),\n                actionSelector: '.form-group.solitary-date'\n            });\n        });\n\n        $('#leadership-role').on('change', function () {\n            toggler.doToggle({\n                toggleType: 'select',\n                actorSelector: '#' + $(this).attr('id'),\n                actionSelector: '.form-group.leadership-date',\n                emptyValue: '0'\n            });\n        });\n\n        $('#board-role').on('change', function () {\n            toggler.doToggle({\n                toggleType: 'select',\n                actorSelector: '#' + $(this).attr('id'),\n                actionSelector: '.form-group.expiry-date',\n                emptyValue: ''\n            });\n        });\n\n        /* Detect any changes to the form data */\n        $('#member_update').dirtyForms()\n            .on('dirty.dirtyforms clean.dirtyforms', function (ev) {\n                var $submitButton = $('#submit_update');\n                if (ev.type === 'dirty') {\n                    $submitButton.removeAttr('disabled');\n                } else {\n                    $submitButton.attr('disabled', 'disabled');\n                }\n            });\n        /* Submit form via AJAX */\n        $('#member_update').on('submit', function (e) {\n            var formAction = this.action;\n            $.ajaxSetup({\n                header: $('meta[name=\"_token\"]').attr('content')\n            });\n            e.preventDefault(e);\n\n            $('#member_saving').removeClass('hidden');\n\n            $.ajax({\n                type: \"POST\",\n                url: formAction,\n                data: $(this).serialize(),\n                dataType: 'json',\n                success: function (data) {\n                    console.log(data);\n                    $('#member_update').dirtyForms('setClean');\n                    $('#submit_update').attr('disabled', 'disabled');\n                    $('#member_saving').addClass('hidden');\n                },\n                error: function (data) {\n                    console.log(data);\n                }\n            })\n        });\n    }\n});\n","// JS code for Member List page\n\n$(document).ready(function ($) {\n    if ($('.member-list').is('*')) {\n        $('.member-list tbody tr').on('click', function () {\n            var id = $(this).attr('data-id');\n            document.location = 'member/details/' + id;\n        });\n\n        $('.member-list').DataTable({\n            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"All\"]],\n            iDisplayLength: -1,\n            aaSorting: [],\n            initComplete: function () {\n                this.api().columns('.filterable').every(function (index) {\n                    var column = this;\n                    var header = column.header();\n                    var select = $('<select><option value=\"\">' + header.innerHTML + '</option></select>')\n                        .appendTo($(column.header()).empty())\n                        .on('change', function () {\n                            var val = $.fn.dataTable.util.escapeRegex(\n                                $(this).val()\n                            );\n\n                            column\n                                .search(val ? '^' + val + '$' : '', true, false)\n                                .draw();\n                        });\n\n                    column.data().unique().sort().each(function (d, j) {\n                        var label = (d == '') ? 'All' : d;\n                        select.append('<option value=\"' + d + '\">' + label + '</option>')\n                    });\n\n                });\n                // Retrieve coven names into select via AJAX\n                $.ajax({\n                    type: \"GET\",\n                    url: '/public/member/covens',\n                    dataType: 'json',\n                    success: function (data) {\n                        var covens = $('[aria-label^=\"Coven\"]').find('select');\n                        covens.css({ width: '75px' })\n                            .empty()\n                            .append($('<option>', { value: '', text: 'Coven' }));\n                        for (var key in data) {\n                            if (data.hasOwnProperty(key)) {\n                                var name = data[key];\n                                covens.append($('<option>', { value: key, text: name }));\n                            }\n                        }\n                    },\n                    error: function (data) {\n                        console.log(data);\n                    }\n                })\n            }\n        });\n    }\n});\n\n","// This is the app global script.\n\nvar UrlQuery = {\n    getVar: function (varName) {\n        var vars = this.getUrlVars();\n        return (vars[varName]);\n    },\n    getUrlVars: function () {\n        var vars = [], hash;\n        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');\n        for (var i = 0; i < hashes.length; i++) {\n            hash = hashes[i].split('=');\n            vars.push(hash[0]);\n            vars[hash[0]] = hash[1];\n        }\n        return vars;\n    },\n    getUrlPart: function(index) {\n        index = index || - 1;\n        var parts = window.location.href.split('/');\n        return (index < 0) ? parts.slice(index)[0] : (parts[index]);\n    }\n}\n"]}